/*
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
		int strLength = s.length();
		int longest = 0;

		if (strLength == 0) {
			longest = 0;
		} else if (strLength == 1) {
			longest = 1;
		} else {
			for (int outer = 0; outer <= (strLength - 1); ++outer) {
				for (int inner = outer; inner <= (strLength - 1); ++inner) {
					String temp = s.substring(outer, (inner+1));
					//System.out.println(temp);
					int length = temp.length();
					if (checkRepetition(temp)) {
						if (length > longest) {
							longest = length;
						}
					}
				}
			}
		}
		return longest;
	}

	public boolean checkRepetition(String temp) {
		int tempLength = temp.length();

		if (tempLength == 1) {
			//System.out.println("True");
			return true;
		} else {
			for (int outer = 0; outer < (tempLength - 1); ++outer) {
				for (int inner = (outer + 1); inner <= (tempLength - 1); ++inner) {
					if (temp.charAt(outer) == temp.charAt(inner)) {
						//System.out.println("Flase");
						return false;
					}
				}
			}
			//System.out.println("False");
			return true;
		}
	}
}
